; injector.masm

.386
.model FLAT, STDCALL

option CASEMAP:none

include \masm32\include\windows.inc
include \masm32\include\user32.inc
include \masm32\include\kernel32.inc

includelib \masm32\lib\user32.lib
includelib \masm32\lib\kernel32.lib

.data
    filename            db "msgbox1.exe", 0
    text_section_name   db ".text"

.code

open_exe:
    push    ebp
    mov     ebp, esp
;; CreateFile
    push    0
    push    0
    push    FILE_ATTRIBUTE_NORMAL
    push    OPEN_EXISTING
    push    0
    push    0
    push    GENERIC_READ or GENERIC_WRITE
    push    offset filename
    call    CreateFile
    or      eax, 0
    jz      open_exe_fail
    mov     edx, [ebp + 0Ch]
    mov     [edx], eax
;; CreateFileMapping
    push    0
    push    0
    push    0
    push    PAGE_READWRITE
    push    0
    push    eax
    call    CreateFileMapping
    or      eax, 0
    jz      open_exe_fail
;; MapViewOfFile
    push    0
    push    0
    push    0
    push    FILE_MAP_WRITE
    push    eax
    call    MapViewOfFile
    or      eax, 0
    jz      open_exe_fail
    mov     edx, [ebp + 08h]
    mov     [edx], eax
    xor     eax, eax
    jmp     open_exe_ret
open_exe_fail:
    mov     eax, 1
open_exe_ret:
    mov     esp, ebp
    pop     ebp
    ret     8

get_code_addr:
    push    ebp
    mov     ebp, esp
    push    ebx
    sub     esp, 2
    mov     ebx, [ebp + 08h]
    mov     eax, [ebx + 03Ch]
    mov     edx, [ebx + eax]
    cmp     edx, 00004550h      ;; check PE signature
    jnz     get_code_addr_fail
    add     eax, 4              ;; COFF headers
    mov     cx, [ebx + eax + 2]
    add     eax, 14h            ;; section table
    cld
get_code_addr_text:
;;    lea     edi, [ebx + eax + (cx - 1) * 28h]
    mov     esi, offset text_section_name
    mov     dx, cx
    mov     cx, 5
    repz cmpsb
    mov     cx, dx
    jz      get_code_addr_text_found
    loop    get_code_addr_text
    jmp     get_code_addr_fail
get_code_addr_text_found:
    add     ebx, 14h
    add     ebx, eax
    mov     ax, cx
    dec     ax
    mov     cx, 28h
    mul     cx
    movzx   eax, ax
    add     ebx, eax
    mov     eax, [ebx]
    jmp     get_code_addr_ret
get_code_addr_fail:
    mov     eax, 0
get_code_addr_ret:
    add     esp, 2
    pop     ebx
    mov     esp, ebp
    pop     ebp
    ret     4

start:
;; Load EXE
    sub     esp, 8
    mov     eax, esp
    add     eax, 4
    push    eax
    add     eax, 4
    push    eax
    call    open_exe
    or      eax, 0
    jnz     fail
;; Inject msg box
    push    [esp + 8]
    call    get_code_addr
    or      eax, 0
    jz      fail
    push    0
    jmp     _end
fail:
    push    1
_end:
    call    ExitProcess

END start
